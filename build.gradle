buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.12.0'
  }
}

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'com.github.ben-manes.versions'

group = GROUP
version = VERSION_NAME

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
  def outputDir = file("$buildDir/$name")

  inputs.files sourceSets.main.runtimeClasspath
  outputs.dir outputDir

  doLast {
    outputDir.mkdirs()
    file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
  }
}

dependencies {
  compile gradleApi()
  compile localGroovy()

  compile 'com.android.tools.build:gradle:1.5.0'
  compile 'com.squareup.wire:wire-compiler:2.1.1'

  testCompile gradleTestKit()
  testCompile 'org.assertj:assertj-core:2.3.0'
  testRuntime files(createClasspathManifest)
}

test {
  testLogging {
    events 'passed', 'skipped', 'failed', 'standardOut'
    exceptionFormat 'full'
  }
}

repositories {
  mavenCentral()
}

artifacts {
  archives jar
}

def installer = install.repositories.mavenInstaller()
def deployer = uploadArchives.repositories.mavenDeployer()

[installer, deployer]*.pom*.whenConfigured { pom ->
  pom.project {
    name POM_NAME
    description POM_DESCRIPTION
    packaging POM_PACKAGING
    url POM_URL
    developers {
      developer {
        id POM_DEVELOPER_ID
        name POM_DEVELOPER_NAME
      }
    }
    issueManagement {
      system POM_ISSUES_SYSTEM
      url POM_ISSUES_URL
    }
    licenses {
      license {
        name POM_LICENSE_NAME
        url POM_LICENSE_URL
        distribution POM_LICENSE_DIST
      }
    }
    scm {
      url POM_SCM_URL
      connection POM_SCM_CONNECTION
      developerConnection POM_SCM_DEV_CONNECTION
    }
  }
}
